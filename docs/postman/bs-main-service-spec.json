{
	"info": {
		"name": "Banking Service - тесты создания пользователей",
		"description": "Коллекция тестов для проверки приложения \"Banking Service\" API v1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "system",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "User create First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"pm.test(\"Has user create response\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Test user 'id' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);",
											"});",
											"pm.test(\"Test user 'login' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('login');",
											"    pm.expect(jsonData.login, '\"login\" must be \"FirstLogin\"').to.eql('FirstLogin');",
											"});",
											"pm.test(\"Test BankAccount 'bankAccount.balance' field\", function () {",
											"    var jsonData = pm.response.json().bankAccount;",
											"    pm.expect(jsonData).to.have.property('balance');",
											"    pm.expect(jsonData.balance, '\"balance\" must be \"50000\"').to.eql(50000);",
											"});",
											"pm.test(\"Test Emails 'emails' field\", function () {",
											"    var jsonData = pm.response.json().emails;",
											"    pm.expect(jsonData[0]).to.have.property('email');",
											"    pm.expect(jsonData[0].email, '\"email\" must be \"First@email.ru\"').to.eql('First@email.ru');",
											"});",
											"pm.test(\"Test Emails 'phones' field\", function () {",
											"    var jsonData = pm.response.json().phones;",
											"    pm.expect(jsonData[0]).to.have.property('phone');",
											"    pm.expect(jsonData[0].phone, '\"phone\" must be \"+79000000001\"').to.eql('+79000000001');",
											"});",
											"pm.test(\"Test user 'firstName' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('firstName');",
											"    pm.expect(jsonData.firstName, '\"firstName\" must be \"FirstFirstName\"').to.eql('FirstFirstName');",
											"});",
											"pm.test(\"Test user 'lastName' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('lastName');",
											"    pm.expect(jsonData.lastName, '\"lastName\" must be \"FirstLastName\"').to.eql('FirstLastName');",
											"});",
											"pm.test(\"Test user 'middleName' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('middleName');",
											"    pm.expect(jsonData.middleName, '\"middleName\" must be \"FirstMiddleName\"').to.eql('FirstMiddleName');",
											"});",
											"pm.test(\"Test user 'dateOfBirth' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('dateOfBirth');",
											"    pm.expect(jsonData.dateOfBirth, '\"dateOfBirth\" must be \"01-01-1980\"').to.eql('01-01-1980');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"FirstLogin\",\n  \"password\": \"FirstPassword\",\n  \"bankAccountCreateDto\": {\"balance\": 50000},\n  \"emails\": [{\"email\":\"First@email.ru\"}],\n  \"phones\": [{\"phone\":\"+79000000001\"}],\n  \"firstName\": \"FirstFirstName\",\n  \"lastName\": \"FirstLastName\",\n  \"middleName\": \"FirstMiddleName\",\n  \"dateOfBirth\": \"01-01-1980\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"pm.test(\"Has user create response\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Test user 'id' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);",
											"});",
											"pm.test(\"Test user 'login' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('login');",
											"    pm.expect(jsonData.login, '\"login\" must be \"SecondLogin\"').to.eql('SecondLogin');",
											"});",
											"pm.test(\"Test BankAccount 'bankAccount.balance' field\", function () {",
											"    var jsonData = pm.response.json().bankAccount;",
											"    pm.expect(jsonData).to.have.property('balance');",
											"    pm.expect(jsonData.balance, '\"balance\" must be \"70000\"').to.eql(70000);",
											"});",
											"pm.test(\"Test Emails 'emails' field\", function () {",
											"    var jsonData = pm.response.json().emails;",
											"    pm.expect(jsonData[0]).to.have.property('email');",
											"    pm.expect(jsonData[0].email, '\"email\" must be \"Second@email.ru\"').to.eql('Second@email.ru');",
											"});",
											"pm.test(\"Test Emails 'phones' field\", function () {",
											"    var jsonData = pm.response.json().phones;",
											"    pm.expect(jsonData[0]).to.have.property('phone');",
											"    pm.expect(jsonData[0].phone, '\"phone\" must be \"+79000000002\"').to.eql('+79000000002');",
											"    pm.expect(jsonData[1]).to.have.property('phone');",
											"    pm.expect(jsonData[1].phone, '\"phone\" must be \"+79000000022\"').to.eql('+79000000022');",
											"});",
											"pm.test(\"Test user 'firstName' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('firstName');",
											"    pm.expect(jsonData.firstName, '\"firstName\" must be \"SecondFirstName\"').to.eql('SecondFirstName');",
											"});",
											"pm.test(\"Test user 'lastName' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('lastName');",
											"    pm.expect(jsonData.lastName, '\"lastName\" must be \"SecondLastName\"').to.eql('SecondLastName');",
											"});",
											"pm.test(\"Test user 'middleName' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('middleName');",
											"    pm.expect(jsonData.middleName, '\"middleName\" must be \"SecondMiddleName\"').to.eql('SecondMiddleName');",
											"});",
											"pm.test(\"Test user 'dateOfBirth' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('dateOfBirth');",
											"    pm.expect(jsonData.dateOfBirth, '\"dateOfBirth\" must be \"25-04-1985\"').to.eql('25-04-1985');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"SecondLogin\",\n  \"password\": \"SecondPassword\",\n  \"bankAccountCreateDto\": {\"balance\": 70000},\n  \"emails\": [{\"email\":\"Second@email.ru\"}],\n  \"phones\": [{\"phone\":\"+79000000002\"}, {\"phone\":\"+79000000022\"}],\n  \"firstName\": \"SecondFirstName\",\n  \"lastName\": \"SecondLastName\",\n  \"middleName\": \"SecondMiddleName\",\n  \"dateOfBirth\": \"25-04-1985\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});",
											"pm.test(\"Content-Type header is application/json\", () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"});",
											"pm.test(\"Has user create response\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"pm.test(\"Test user 'id' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('id');",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);",
											"});",
											"pm.test(\"Test user 'login' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('login');",
											"    pm.expect(jsonData.login, '\"login\" must be \"ThirdLogin\"').to.eql('ThirdLogin');",
											"});",
											"pm.test(\"Test BankAccount 'bankAccount.balance' field\", function () {",
											"    var jsonData = pm.response.json().bankAccount;",
											"    pm.expect(jsonData).to.have.property('balance');",
											"    pm.expect(jsonData.balance, '\"balance\" must be \"100000\"').to.eql(100000);",
											"});",
											"pm.test(\"Test Emails 'emails' field\", function () {",
											"    var jsonData = pm.response.json().emails;",
											"    pm.expect(jsonData[0]).to.have.property('email');",
											"    pm.expect(jsonData[0].email, '\"email\" must be \"Third1@email.ru\"').to.eql('Third1@email.ru');",
											"    pm.expect(jsonData[1]).to.have.property('email');",
											"    pm.expect(jsonData[1].email, '\"email\" must be \"Third2@email.ru\"').to.eql('Third2@email.ru');",
											"    pm.expect(jsonData[2]).to.have.property('email');",
											"    pm.expect(jsonData[2].email, '\"email\" must be \"Third3@email.ru\"').to.eql('Third3@email.ru');",
											"});",
											"pm.test(\"Test Emails 'phones' field\", function () {",
											"    var jsonData = pm.response.json().phones;",
											"    pm.expect(jsonData[0]).to.have.property('phone');",
											"    pm.expect(jsonData[0].phone, '\"phone\" must be \"+79000000003\"').to.eql('+79000000003');",
											"    pm.expect(jsonData[1]).to.have.property('phone');",
											"    pm.expect(jsonData[1].phone, '\"phone\" must be \"+79000000032\"').to.eql('+79000000032');",
											"    pm.expect(jsonData[2]).to.have.property('phone');",
											"    pm.expect(jsonData[2].phone, '\"phone\" must be \"+79000000033\"').to.eql('+79000000033');",
											"});",
											"pm.test(\"Test user 'firstName' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('firstName');",
											"    pm.expect(jsonData.firstName, '\"firstName\" must be \"ThirdFirstName\"').to.eql('ThirdFirstName');",
											"});",
											"pm.test(\"Test user 'lastName' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('lastName');",
											"    pm.expect(jsonData.lastName, '\"lastName\" must be \"ThirdLastName\"').to.eql('ThirdLastName');",
											"});",
											"pm.test(\"Test user 'middleName' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('middleName');",
											"    pm.expect(jsonData.middleName, '\"middleName\" must be \"ThirdMiddleName\"').to.eql('ThirdMiddleName');",
											"});",
											"pm.test(\"Test user 'dateOfBirth' field\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('dateOfBirth');",
											"    pm.expect(jsonData.dateOfBirth, '\"dateOfBirth\" must be \"17-02-1980\"').to.eql('17-02-1980');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"ThirdLogin\",\n  \"password\": \"ThirdPassword\",\n  \"bankAccountCreateDto\": {\"balance\": 70000},\n  \"emails\": [{\"email\":\"Third1@email.ru\"}, {\"email\":\"Third2@email.ru\"}, {\"email\":\"Third3@email.ru\"}],\n  \"phones\": [{\"phone\":\"+79000000003\"}, {\"phone\":\"+79000000032\"}, {\"phone\":\"+79000000033\"}],\n  \"firstName\": \"ThirdFirstName\",\n  \"lastName\": \"ThirdLastName\",\n  \"middleName\": \"ThirdMiddleName\",\n  \"dateOfBirth\": \"17-02-1980\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}",
									"host": [
										"{{baseUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/system/users",
			"type": "string"
		}
	]
}